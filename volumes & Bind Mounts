# Docker Volumes

## Problem Statement

It is a very common requirement to persist the data in a Docker container beyond the lifetime of the container. However, the file system
of a Docker container is deleted/removed when the container dies. 

## Solution

There are 2 different ways how docker solves this problem.

1. Volumes
2. Bind Directory on a host as a Mount

### Volumes 

Volumes aims to solve the same problem by providing a way to store data on the host file system, separate from the container's file system, 
so that the data can persist even if the container is deleted and recreated.

![image](https://user-images.githubusercontent.com/43399466/218018334-286d8949-d155-4d55-80bc-24827b02f9b1.png)


Volumes can be created and managed using the docker volume command. You can create a new volume using the following command:

```
docker volume create <volume_name>
```

Once a volume is created, you can mount it to a container using the -v or --mount option when running a docker run command. 

For example:

```
docker run -it -v <volume_name>:/data <image_name> /bin/bash
```

This command will mount the volume <volume_name> to the /data directory in the container. Any data written to the /data directory
inside the container will be persisted in the volume on the host file system.

### Bind Directory on a host as a Mount

Bind mounts also aims to solve the same problem but in a complete different way.

Using this way, user can mount a directory from the host file system into a container. Bind mounts have the same behavior as volumes, but
are specified using a host path instead of a volume name. 

For example, 

```
docker run -it -v <host_path>:<container_path> <image_name> /bin/bash
```

## Key Differences between Volumes and Bind Directory on a host as a Mount

Volumes are managed, created, mounted and deleted using the Docker API. However, Volumes are more flexible than bind mounts, as 
they can be managed and backed up separately from the host file system, and can be moved between containers and hosts.

In a nutshell, Bind Directory on a host as a Mount are appropriate for simple use cases where you need to mount a directory from the host file system into
a container, while volumes are better suited for more complex use cases where you need more control over the data being persisted
in the container.




Here’s a Dockerfile that creates a Python application to interact with files in the mounted volume, allowing you to test reading from and writing to the volume.

### Dockerfile Example

```dockerfile
# Use the latest Ubuntu image as the base
FROM ubuntu:latest

# Set the working directory in the container
WORKDIR /app

# Install Python and create necessary directories
RUN apt-get update && apt-get install -y python3 python3-pip && \
    mkdir /app/data

# Copy the Python script into the container
COPY app.py /app/app.py

# Set environment variables
ENV GREETING "Hello from Docker!"

# Define the command to run the application
CMD ["python3", "app.py"]
```

### Sample Python Script (`app.py`)

This Python script will:
- Read a file from the `/app/data` directory if it exists.
- Write a greeting message into a file called `output.txt` in the same directory.

```python
import os

# Define the directory and files
data_dir = "/app/data"
input_file = os.path.join(data_dir, "input.txt")
output_file = os.path.join(data_dir, "output.txt")

# Check if input.txt exists in the volume
if os.path.exists(input_file):
    with open(input_file, 'r') as file:
        content = file.read()
    print(f"Read from input.txt: {content}")
else:
    print("input.txt not found. Create this file in your volume to see it read by the container.")

# Write a greeting message to output.txt
with open(output_file, 'w') as file:
    file.write("Hello from Docker! This message was written to output.txt\n")

print("Written to output.txt")
```

### Steps to Build and Run

1. **Build the Docker Image**
   ```bash
   docker build -t python-volume-app .
   ```

2. **Run the Container with a Volume**
   Here’s how to start the container and mount `myvolume` to `/app/data`:

   ```bash
   docker run -v myvolume:/app/data python-volume-app
   ```

### Testing Steps

- **Inspect the Volume Content**:
  After running the container, check the `myvolume` volume on the host:

  ```bash
  docker volume inspect myvolume
  ```

  Use the `Mountpoint` path from the output to view the files directly on your host. You should see an `output.txt` file created by the container.

- **Add `input.txt` to the Volume**:
  To further test, create a file named `input.txt` in the `myvolume` directory on your host with some content, then rerun the container:

  ```bash
  echo "This is a test message." > /path/to/volume/input.txt
  docker run -v myvolume:/app/data python-volume-app
  ```

- **Check Output**:
  The container will read from `input.txt` and print its contents. It will also write to `output.txt`, which you can check both inside the container and on your host.





This message means the container has successfully mounted `my-volume` and executed the script in `app.py`:

- **"input.txt not found"**: Since there’s no `input.txt` file in `my-volume`, the script couldn’t find it in `/app/data`. You can add this file manually to the volume to see it being read by the container.

- **"Written to output.txt"**: The script has created an `output.txt` file in `/app/data`. This confirms that the container wrote data to the mounted volume successfully.

### Steps to Check `output.txt` and Add `input.txt`

1. **Locate the Volume on Host**:
   Use `docker volume inspect` to find the exact path where `my-volume` is stored on the host.

   ```bash
   docker volume inspect my-volume
   ```

   Look for the `Mountpoint` path in the output.

2. **Check `output.txt` on Host**:
   Go to the volume's path on your host and list the contents:

   ```bash
   cd /path/to/volume
   cat output.txt
   ```

   You should see the message written by the container in `output.txt`.

3. **Create `input.txt`**:
   To test reading from the volume, create an `input.txt` file in the same directory on your host:

   ```bash
   echo "This is a test message." > /path/to/volume/input.txt
   ```

4. **Run the Container Again**:
   Now rerun the container to see if it reads `input.txt`:

   ```bash
   docker run -v my-volume:/app/data python-volume-app
   ```

   This time, you should see output indicating the content of `input.txt` as read by the container. This process confirms that the volume is working for both reading and writing data.






The `Permission denied` error happens because Docker’s default volume directory (`/var/lib/docker/volumes/...`) often requires root access to view its contents. Here are a couple of ways to access the contents:

### Option 1: Use `sudo` to Access the Directory
Run the `cd` command with `sudo` to temporarily elevate your permissions:

```bash
sudo cd /var/lib/docker/volumes/my-volume/_data
```

Or list the files directly using:

```bash
sudo ls /var/lib/docker/volumes/my-volume/_data
```

### Option 2: Open a Temporary Docker Container to Access the Volume
You can start a temporary container with the volume mounted and use it to explore the volume contents:

```bash
docker run --rm -it -v my-volume:/app ubuntu:latest /bin/bash
```

Once inside the container, navigate to `/app`:

```bash
cd /app
ls
```

This method keeps you within Docker while allowing you to read and modify files in the volume without changing host permissions.












Using bind mounts in Docker allows you to link a specific directory on your host machine directly to a directory in the container. This is particularly useful when you want to work with files directly on your host without using Docker volumes. Here’s how to set up and use bind mounts with a similar application as we discussed before.

### Steps to Use Bind Mounts

#### 1. **Prepare Your Application Files**
Create the same files (`app.py` and Dockerfile) in a directory on your host machine. For example, you can create a directory called `docker-bind-mount-example`:

```bash
mkdir ~/docker-bind-mount-example
cd ~/docker-bind-mount-example
```

Inside this directory, create `app.py`:

```python
# app.py
import os

# Define the directory and files
data_dir = "/app/data"
input_file = os.path.join(data_dir, "input.txt")
output_file = os.path.join(data_dir, "output.txt")

# Check if input.txt exists in the volume
if os.path.exists(input_file):
    with open(input_file, 'r') as file:
        content = file.read()
    print(f"Read from input.txt: {content}")
else:
    print("input.txt not found. Create this file in your mount to see it read by the container.")

# Write a greeting message to output.txt
with open(output_file, 'w') as file:
    file.write("Hello from Docker! This message was written to output.txt\n")

print("Written to output.txt")
```

And then create a simple `Dockerfile`:

```dockerfile
# Use the latest Ubuntu image as the base
FROM ubuntu:latest

# Set the working directory in the container
WORKDIR /app

# Install Python
RUN apt-get update && apt-get install -y python3 python3-pip

# Copy the Python script into the container
COPY app.py /app/app.py

# Define the command to run the application
CMD ["python3", "app.py"]
```

#### 2. **Build the Docker Image**
Build the Docker image using the following command from within the `~/docker-bind-mount-example` directory:

```bash
docker build -t python-bind-mount-app .
```

#### 3. **Run the Container with a Bind Mount**
You can now run the container using a bind mount to link a host directory to the container. Here’s how to do it:

```bash
docker run -v ~/docker-bind-mount-example/data:/app/data python-bind-mount-app
```

In this command:
- `~/docker-bind-mount-example/data` is the directory on your host that you want to mount.
- `/app/data` is the directory inside the container where the host directory will be mounted.

#### 4. **Create `input.txt` on the Host**
Before running the container, you might want to create an `input.txt` file in the host directory. Do this by running:

```bash
mkdir ~/docker-bind-mount-example/data
echo "This is a test message." > ~/docker-bind-mount-example/data/input.txt
```

#### 5. **Run the Container Again**
Now run the container again with the bind mount. The output should reflect that it can read the `input.txt`:

```bash
docker run -v ~/docker-bind-mount-example/data:/app/data python-bind-mount-app
```

### Expected Output
- If `input.txt` exists, the output will be:
   ```
   Read from input.txt: This is a test message.
   Written to output.txt
   ```

- If `input.txt` does not exist, the output will be:
   ```
   input.txt not found. Create this file in your mount to see it read by the container.
   Written to output.txt
   ```

### 6. **Check the Output on the Host**
After running the container, you can check the contents of `output.txt` directly from the host:

```bash
cat ~/docker-bind-mount-example/data/output.txt
```

You should see:
```
Hello from Docker! This message was written to output.txt
```

### Summary of Bind Mounts
- **Flexibility**: Bind mounts allow you to link a specific host directory to a container directory, providing flexibility in file management.
- **Direct Access**: You can access and modify files directly on the host, which is useful for development and debugging.
- **No Docker Volume Management**: Unlike volumes, bind mounts use existing directories on your host, so you don't need to manage Docker's volume system.

Let me know if you have any further questions or need more clarification!




After running the command:

```bash
docker run -v ~/docker-bind-mount-example/data:/app/data python-bind-mount-app
```

you can verify that it worked by checking the contents of the `output.txt` file that was created inside the bind-mounted directory on your host. Here’s how to do it step by step:

### Step 1: Check the Output on the Host

1. **Navigate to the Host Directory**:
   Open your terminal and navigate to the directory where the bind mount is located:

   ```bash
   cd ~/docker-bind-mount-example/data
   ```

2. **List the Files**:
   Use the `ls` command to see the files in the directory:

   ```bash
   ls
   ```

   You should see both `input.txt` (if you created it before running the container) and `output.txt` (which should have been created by the container).

3. **View the Contents of `output.txt`**:
   You can view the contents of `output.txt` to confirm that the container wrote the expected output:

   ```bash
   cat output.txt
   ```

   If everything worked correctly, you should see:

   ```
   Hello from Docker! This message was written to output.txt
   ```

### Step 2: Check the Contents of `input.txt` (Optional)

If you want to verify that the container read from `input.txt`, you can also check its contents:

```bash
cat input.txt
```

You should see the message you previously wrote, like:

```
This is a test message.
```

### Summary
- If you see `output.txt` in the directory with the expected message, it indicates that the container successfully executed the script and wrote to the file.
- If you also see the contents of `input.txt` reflect what you put in there, it confirms that the container could read from the mounted directory as intended.

This verification process helps ensure that your bind mount is functioning properly, allowing the container to access and modify files on your host system. Let me know if you need any more help!
